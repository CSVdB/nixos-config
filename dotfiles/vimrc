filetype plugin indent on

" size of a hard tabstop
set tabstop=2

" size of an "indent"
set shiftwidth=2

" Enable syntax highlighting
syntax on 
autocmd bufreadpre *.{txt,md} setlocal textwidth=80
set autoindent

set clipboard=unnamed
let g:markdown_folding = 1
au FileType markdown setlocal foldlevel=99

" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=2

" make "tab" insert indents instead of tabs at the beginning of a line
set smarttab

" always uses spaces instead of tab characters
set expandtab

" number lines
set number

autocmd FileType haskell nmap <silent> ,i :silent update <bar> HsimportModule<CR>
autocmd FileType haskell nmap <silent> ,y :silent update <bar> HsimportSymbol<CR>

autocmd FileType cabal setlocal shiftwidth=4 tabstop=4 softtabstop=4
let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_global_ycm_extra_conf = "./.ycm_extra_conf.py"

" Hindent options
autocmd BufWritePre *.hs :call RunOrmolu()
nnoremap td :call DisableOrmolu()<CR>
let g:hindent_on_save = 0

" Clang-format options
autocmd FileType c ClangFormatAutoEnable

" No more arrow keys
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>
imap <Left> <Nop>
imap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>

set backspace=indent,eol,start

let mapleader=","

set encoding=utf-8
set t_Co=256

" set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
let g:Powerline_symbols = "fancy"
set laststatus=2

" Powerline fonts in airline
let g:airline_powerline_fonts = 1

colorscheme wombat256mod

" For YouCompleteMe
set completeopt=menuone


" delete trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,haskell autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

autocmd BufWritePre *.py execute ':Black'
autocmd BufWritePre *.json execute ':call JsonBeautify()'
autocmd BufWritePre *.html execute ':call HtmlBeautify()'
autocmd BufWritePre *.js execute ':call JsBeautify()'
autocmd BufWritePre *.css execute ':call CSSBeautify()'

" Close vim entirely
map :q :qa

" move between buffers with just C-w
map <C-w> :wincmd p<CR>

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['red',         'firebrick3'],
    \ ]


"make jj do esc"
inoremap jj <Esc>

" set spell
map :sp :set spell
map :ns :set nospell

exe "noremap vv :tabe " . expand("<sfile>:p") . "<CR>"

